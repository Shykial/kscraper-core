openapi: 3.0.3
info:
  title: K-Scraper-Core application REST API
  description: Openapi schema for k-scraper-core REST operations
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/kscraper-core'
tags:
  - name: Auth
    description: Operations related to authorization and authentication
  - name: Extracting Details
    description: Operations related to extracting details
  - name: Domain Request Details
    description: Operations related to domain request details
  - name: Scraping
    description: Operations related to scraping websites data
  - name: Admin Operations
    description: Administrative operations

paths:
  /auth/login:
    post:
      security: [ ]
      tags:
        - Auth
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        400:
          description: Bad request
        401:
          description: Unauthorized

  /auth/register:
    post:
      security: [ ]
      tags:
        - Auth
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
        400:
          description: Bad request

  /extracting-details/{id}:
    get:
      tags:
        - Extracting Details
      operationId: findExtractingDetailsById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractingDetailsResponse'
        401:
          description: Unauthorized
        404:
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Extracting Details
      operationId: updateExtractingDetails
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtractingDetailsUpdateRequest'
      responses:
        204:
          description: No content
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          description: Unauthorized
        404:
          $ref: '#/components/responses/NotFound'

  /extracting-details:
    get:
      tags:
        - ExtractingDetails
      operationId: findExtractingDetails
      parameters:
        - name: domainId
          in: query
          schema:
            type: string
          required: true
        - name: fieldNames
          in: query
          schema:
            type: array
            items:
              type: string
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtractingDetailsResponse'
        401:
          description: Unauthorized
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Extracting Details
      operationId: addExtractingDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtractingDetailsRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddExtractingDetailsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          description: Unauthorized

  /domain-request-details/{id}:
    get:
      tags:
        - Domain Request Details
      operationId: findDomainRequestDetailsById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainRequestDetailsResponse'
        401:
          description: Unauthorized
        404:
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Domain Request Details
      operationId: updateDomainRequestDetails
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainRequestDetailsRequest'
      responses:
        204:
          description: No content
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          description: Unauthorized
        404:
          $ref: '#/components/responses/NotFound'

  /domain-request-details:
    get:
      tags:
        - Domain Request Details
      operationId: findDomainRequestDetails
      parameters:
        - name: domainName
          in: query
          description: domain name, should not contain neither http(s) part or www
          example: "google.com"
          schema:
            type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainRequestDetailsResponse'
        401:
          description: Unauthorized
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Domain Request Details
      operationId: addDomainRequestDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainRequestDetailsRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainRequestDetailsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          description: Unauthorized
        404:
          $ref: '#/components/responses/NotFound'

  /scrape:
    get:
      tags:
        - Scraping
      operationId: scrapeResource
      parameters:
        - name: url
          in: query
          required: true
          description: scraped resource exact url
          schema:
            type: string
        - name: fields
          in: query
          required: false
          description: extracting details field names for scraping. Will use all registered for domain if not specified
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrapedDataResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          description: Unauthorized
        404:
          $ref: '#/components/responses/NotFound'

  /administrative/change-account-state:
    put:
      tags:
        - Admin Operations
      operationId: changeAccountState
      description: change given account's state
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAccountStateRequest'
      responses:
        204:
          description: No content
        401:
          description: Unauthorized
        404:
          $ref: '#/components/responses/NotFound'

  /administrative/change-email:
    put:
      tags:
        - Admin Operations
      operationId: changeUserEmail
      description: Change given user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserEmailRequest'
      responses:
        204:
          description: No content
        401:
          description: Unauthorized
        404:
          $ref: '#/components/responses/NotFound'

security:
  - bearerAuth: [ ]

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    IdResponse:
      type: object
      properties:
        id:
          type: string
      required:
        - id
    LoginRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password

    RegisterUserRequest:
      type: object
      properties:
        login:
          type: string
          pattern: '^\w{3,}'
        email:
          type: string
          format: email
        password:
          type: string
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W).{8,}$'
      required:
        - login
        - email
        - password

    AuthToken:
      type: object
      properties:
        token:
          type: string
      required:
        - token

    ExtractingDetailsRequest:
      type: object
      properties:
        domainId:
          type: string
        extractedFieldsDetails:
          type: array
          items:
            $ref: '#/components/schemas/ExtractedFieldDetails'
      required:
        - domainId
        - extractedFieldsDetails

    ExtractingDetailsUpdateRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/ExtractedFieldDetails'

    AddExtractingDetailsResponse:
      type: object
      properties:
        domainId:
          type: string
        extractedFieldsDetails:
          type: array
          items:
            $ref: '#/components/schemas/ExtractingDetailsResponse'
      required:
        - domainId
        - extractedFieldsDetails

    ExtractingDetailsResponse:
      type: object
      properties:
        id:
          type: string
      allOf:
        - $ref: '#/components/schemas/ExtractedFieldDetails'
      required:
        - id

    ExtractedFieldDetails:
      type: object
      properties:
        fieldName:
          type: string
        selector:
          $ref: '#/components/schemas/Selector'
        extractedPropertyType:
          $ref: '#/components/schemas/ExtractedPropertyType'
        extractedPropertyValue:
          type: string
        regexFilter:
          type: string
          description: base64 encoded regex filter
        regexReplacements:
          type: array
          items:
            $ref: '#/components/schemas/RegexReplacement'

      required:
        - fieldName
        - selector
        - extractedPropertyType

    Selector:
      type: object
      properties:
        value:
          type: string
        index:
          type: integer
      required:
        - value
        - index

    ExtractedPropertyType:
      type: string
      enum:
        - TEXT
        - OWN_TEXT
        - HTML
        - ATTRIBUTE

    DomainRequestDetailsRequest:
      type: object
      properties:
        domainName:
          type: string
        requestHeaders:
          type: object
          additionalProperties:
            type: string
        requestTimeoutInMillis:
          type: integer
      required:
        - domainName

    DomainRequestDetailsResponse:
      type: object
      properties:
        id:
          type: string
      allOf:
        - $ref: '#/components/schemas/DomainRequestDetailsRequest'
      required:
        - id

    ScrapedDataResponse:
      type: object
      properties:
        url:
          type: string
        scrapedFields:
          type: string
          additionalProperties:
            type: string
        failedFields:
          type: array
          items:
            type: string
        scrapingTimestamp:
          type: string
          format: date-time
      required:
        - url
        - scrapedFields
        - scrapingTimestamp
        - failedFields

    RegexReplacement:
      type: object
      properties:
        base64EncodedRegex:
          type: string
        replacement:
          type: string
      required:
        - base64EncodedRegex
        - replacement

    ChangeAccountStateRequest:
      type: object
      properties:
        accountLogin:
          type: string
        newState:
          $ref: '#/components/schemas/AccountState'
      required:
        - accountLogin
        - newState

    AccountState:
      type: string
      enum:
        - ENABLED
        - DISABLED

    ChangeUserEmailRequest:
      type: object
      properties:
        login:
          type: string
        newEmail:
          type: string
          format: email
      required:
        - login
        - newEmail

    ErrorResponse:
      type: object
      properties:
        errorType:
          $ref: '#/components/schemas/ErrorType'
        errorMessage:
          type: string
      required:
        - errorType
        - errorMessage

    InvalidInputErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      properties:
        rejectedFields:
          type: array
          items:
            $ref: '#/components/schemas/RejectedField'
      required:
        - rejectedFields

    RejectedField:
      type: object
      properties:
        fieldName:
          type: string
        rejectedValue: { }
      required:
        - fieldName
    ErrorType:
      type: string
      enum:
        - INVALID_INPUT
        - INTERNAL_SEVER_ERROR
        - NOT_FOUND
        - DUPLICATE_DATA
        - AUTHENTICATION_FAILURE
        - AUTHORIZATION_FAILURE

  parameters:
    Id:
      name: id
      in: path
      schema:
        type: string
      required: true

  responses:
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
